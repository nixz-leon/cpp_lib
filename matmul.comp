#version 430
layout(local_size_x = 16, local_size_y = 16) in;

layout(std430, binding = 0) readonly buffer MatA {
    float a[];
};

layout(std430, binding = 1) readonly buffer MatB {
    float b[];
};

layout(std430, binding = 2) writeonly buffer MatC {
    float c[];
};

uniform int width;   // B.columns
uniform int height;  // A.rows
uniform int depth;   // A.columns

shared float sharedA[16][16];
shared float sharedB[16][16];

void main() {
    uint row = gl_GlobalInvocationID.y;
    uint col = gl_GlobalInvocationID.x;
    
    if(row >= height || col >= width) return;
    
    float sum = 0.0;
    
    // Loop over blocks
    for(int block = 0; block < (depth + 15) / 16; ++block) {
        // Load data into shared memory
        uint localRow = gl_LocalInvocationID.y;
        uint localCol = gl_LocalInvocationID.x;
        
        if(row < height && (block * 16 + localCol) < depth)
            sharedA[localRow][localCol] = a[row * depth + block * 16 + localCol];
        else
            sharedA[localRow][localCol] = 0.0;
            
        if((block * 16 + localRow) < depth && col < width)
            sharedB[localRow][localCol] = b[(block * 16 + localRow) * width + col];
        else
            sharedB[localRow][localCol] = 0.0;
            
        barrier();
        memoryBarrierShared();
        
        // Compute partial sum
        for(int k = 0; k < 16; ++k) {
            sum += sharedA[localRow][k] * sharedB[k][localCol];
        }
        
        barrier();
    }
    
    if(row < height && col < width)
        c[row * width + col] = sum;
}