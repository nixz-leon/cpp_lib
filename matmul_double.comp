#version 430
#extension GL_ARB_gpu_shader_fp64 : require
#extension GL_ARB_compute_shader : require
#extension GL_KHR_memory_scope_semantics : require

// Optimal work group size for double precision
layout(local_size_x = 32, local_size_y = 32) in;

// Explicitly packed layout for doubles
layout(std430, binding = 0) readonly buffer MatrixA {
    double a[];
};

layout(std430, binding = 1) readonly buffer MatrixB {
    double b[];
};

layout(std430, binding = 2) writeonly buffer MatrixC {
    double c[];
};

uniform int width;
uniform int height;
uniform int depth;

// Double buffered shared memory with padding for bank conflicts
shared double As[2][33][32];  // Extra column to avoid bank conflicts
shared double Bs[2][33][32];

void main() {
    // Thread identification
    const uint row = gl_GlobalInvocationID.y;
    const uint col = gl_GlobalInvocationID.x;
    const uint localRow = gl_LocalInvocationID.y;
    const uint localCol = gl_LocalInvocationID.x;
    
    // Early exit
    if(row >= height || col >= width) {
        return;
    }
    
    // Register blocking with smaller arrays due to register pressure
    double sums[2] = double[2](0.0LF, 0.0LF);
    
    // Double buffering index
    uint pingpong = 0;
    
    // Preload first tile
    if(gl_LocalInvocationIndex < 1024) {
        const uint tile_idx = 0;
        if(tile_idx * 32 + localCol < depth) {
            As[0][localRow][localCol] = a[row * depth + tile_idx * 32 + localCol];
        }
        if(tile_idx * 32 + localRow < depth) {
            Bs[0][localRow][localCol] = b[(tile_idx * 32 + localRow) * width + col];
        }
    }
    
    barrier();
    
    // Main computation loop with double buffering
    for(uint t = 0; t < (depth + 31) / 32; t++) {
        // Load next tile while computing current one
        if(t + 1 < (depth + 31) / 32) {
            if(gl_LocalInvocationIndex < 1024) {
                const uint next_tile = t + 1;
                if(next_tile * 32 + localCol < depth) {
                    As[1-pingpong][localRow][localCol] = a[row * depth + next_tile * 32 + localCol];
                }
                if(next_tile * 32 + localRow < depth) {
                    Bs[1-pingpong][localRow][localCol] = b[(next_tile * 32 + localRow) * width + col];
                }
            }
        }
        
        // Compute current tile with moderate unrolling
        #pragma unroll 4
        for(uint k = 0; k < 32 && t * 32 + k < depth; k += 2) {
            // Cache values in registers
            double a_reg[2], b_reg[2];
            
            #pragma unroll
            for(int i = 0; i < 2 && k + i < 32 && t * 32 + k + i < depth; i++) {
                a_reg[i] = As[pingpong][localRow][k+i];
                b_reg[i] = Bs[pingpong][k+i][localCol];
            }
            
            // Compute with manual vectorization
            #pragma unroll
            for(int i = 0; i < 2 && k + i < 32 && t * 32 + k + i < depth; i++) {
                sums[i] += a_reg[i] * b_reg[i];
            }
        }
        
        pingpong = 1 - pingpong;
        barrier();
    }
    
    // Final reduction
    double final_sum = sums[0] + sums[1];
    
    // Coalesced write
    c[row * width + col] = final_sum;
}