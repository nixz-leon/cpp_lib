#version 430
#extension GL_ARB_compute_shader : require
#extension GL_KHR_memory_scope_semantics : require

// Increased work group size for better occupancy
layout(local_size_x = 32, local_size_y = 32) in;

// Explicitly packed layout for better memory alignment
layout(std430, binding = 0) readonly buffer MatrixA {
    float a[];
};

layout(std430, binding = 1) readonly buffer MatrixB {
    float b[];
};

layout(std430, binding = 2) writeonly buffer MatrixC {
    float c[];
};

uniform int width;
uniform int height;
uniform int depth;

// Double buffered shared memory to overlap computation and memory access
shared float As[2][32][32];
shared float Bs[2][32][32];

void main() {
    // Local thread identification
    const uint row = gl_GlobalInvocationID.y;
    const uint col = gl_GlobalInvocationID.x;
    const uint localRow = gl_LocalInvocationID.y;
    const uint localCol = gl_LocalInvocationID.x;
    
    // Early exit for out-of-bounds threads
    if(row >= height || col >= width) {
        return;
    }
    
    // Register blocking for better instruction-level parallelism
    float sums[4] = float[4](0.0, 0.0, 0.0, 0.0);
    
    // Double buffering indices
    uint pingpong = 0;
    
    // Preload first tile
    if(gl_LocalInvocationIndex < 1024) { // 32x32 threads
        const uint tile_idx = 0;
        if(tile_idx * 32 + localCol < depth) {
            As[0][localRow][localCol] = a[row * depth + tile_idx * 32 + localCol];
        }
        if(tile_idx * 32 + localRow < depth) {
            Bs[0][localRow][localCol] = b[(tile_idx * 32 + localRow) * width + col];
        }
    }
    
    barrier();
    
    // Main computation loop with double buffering
    for(uint t = 0; t < (depth + 31) / 32; t++) {
        // Load next tile while computing current one
        if(t + 1 < (depth + 31) / 32) {
            if(gl_LocalInvocationIndex < 1024) {
                const uint next_tile = t + 1;
                if(next_tile * 32 + localCol < depth) {
                    As[1-pingpong][localRow][localCol] = a[row * depth + next_tile * 32 + localCol];
                }
                if(next_tile * 32 + localRow < depth) {
                    Bs[1-pingpong][localRow][localCol] = b[(next_tile * 32 + localRow) * width + col];
                }
            }
        }
        
        // Compute using current tile with aggressive loop unrolling
        #pragma unroll 8
        for(uint k = 0; k < 32 && t * 32 + k < depth; k += 4) {
            // Prefetch next iteration
            float a_reg[4], b_reg[4];
            
            #pragma unroll
            for(int i = 0; i < 4 && k + i < 32 && t * 32 + k + i < depth; i++) {
                a_reg[i] = As[pingpong][localRow][k+i];
                b_reg[i] = Bs[pingpong][k+i][localCol];
            }
            
            // Use FMA for better performance
            #pragma unroll
            for(int i = 0; i < 4 && k + i < 32 && t * 32 + k + i < depth; i++) {
                sums[i] = fma(a_reg[i], b_reg[i], sums[i]);
            }
        }
        
        pingpong = 1 - pingpong;
        barrier();
    }
    
    // Reduction of partial sums
    float final_sum = sums[0] + sums[1] + sums[2] + sums[3];
    
    // Store result with coalesced memory access
    c[row * width + col] = final_sum;
}