#version 430
#extension GL_ARB_compute_shader : require
#extension GL_KHR_memory_scope_semantics : require

// Optimal work group size for vector operations
layout(local_size_x = 256) in;

// Input vectors and output
layout(std430, binding = 0) readonly buffer InputA {
    float a[];
};

layout(std430, binding = 1) readonly buffer InputB {
    float b[];
};

layout(std430, binding = 2) writeonly buffer Output {
    float result[];
};

// Vector length
uniform int length;

void main() {
    // Global thread ID
    uint id = gl_GlobalInvocationID.x;
    
    // Make sure we don't go out of bounds
    if (id < length) {
        // Perform element-wise multiplication
        result[id] = a[id] * b[id];
    }
} 