#version 430
#extension GL_ARB_compute_shader : require
#extension GL_ARB_gpu_shader_fp64 : require

// Work group size for matrix multiplication
layout(local_size_x = 16, local_size_y = 16) in;

// Input matrices and output
layout(std430, binding = 0) readonly buffer MatrixA {
    double a[];
};

layout(std430, binding = 1) readonly buffer MatrixB {
    double b[];
};

layout(std430, binding = 2) writeonly buffer Output {
    double result[];
};

// Matrix dimensions
uniform int a_rows;
uniform int a_cols;
uniform int b_cols;

void main() {
    // Global thread IDs
    uint row = gl_GlobalInvocationID.y;
    uint col = gl_GlobalInvocationID.x;
    
    // Make sure we don't go out of bounds
    if (row < a_rows && col < b_cols) {
        double sum = 0.0;
        
        // Compute matrix multiplication for this element
        for (int k = 0; k < a_cols; k++) {
            sum += a[row * a_cols + k] * b[k * b_cols + col];
        }
        
        // Store the result
        result[row * b_cols + col] = sum;
    }
}