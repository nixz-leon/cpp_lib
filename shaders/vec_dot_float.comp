#version 430
#extension GL_ARB_compute_shader : require
#extension GL_ARB_shader_atomic_counter_ops : require

// Use a smaller work group for better reduction algorithm
layout(local_size_x = 256) in;

// Input vectors and output
layout(std430, binding = 0) readonly buffer InputA {
    float a[];
};

layout(std430, binding = 1) readonly buffer InputB {
    float b[];
};

layout(std430, binding = 2) coherent buffer Output {
    float result;
};

// Vector length
uniform int length;

// Shared memory for reduction
shared float partial_sums[256];

void main() {
    uint local_id = gl_LocalInvocationID.x;
    uint global_id = gl_GlobalInvocationID.x;
    
    // Initialize partial sum
    float dot_product = 0.0;
    
    // Each thread computes multiple elements for better efficiency
    for (uint i = global_id; i < length; i += gl_WorkGroupSize.x * gl_NumWorkGroups.x) {
        if (i < length) {
            dot_product += a[i] * b[i];
        }
    }
    
    // Store in shared memory
    partial_sums[local_id] = dot_product;
    
    // Synchronize threads
    barrier();
    
    // Parallel reduction within workgroup
    for (uint stride = gl_WorkGroupSize.x / 2; stride > 0; stride >>= 1) {
        if (local_id < stride) {
            partial_sums[local_id] += partial_sums[local_id + stride];
        }
        barrier();
    }
    
    // First thread in workgroup adds its result to global sum
    if (local_id == 0) {
        atomicAdd(result, partial_sums[0]);
    }
} 